CREATE DATABASE DROPW;
GO
USE DROPW;
GO
DROP DATABASE PP_DDBB;
GO
CREATE DATABASE PP_DDBB;
GO
USE PP_DDBB;
GO
----- DROPS -----

DROP TABLE IF EXISTS STATUS;
DROP TABLE IF EXISTS USERS;
DROP TABLE IF EXISTS PWD_HISTORY;
DROP TABLE IF EXISTS USER_CONNECTIONS;
DROP TABLE IF EXISTS USER_CONNECTIONS_HISTORY;
GO
----- TABLES -----

-- TABLE: STATUS
CREATE TABLE STATUS(
    STATUS INT PRIMARY KEY
);

-- TABLE: USERS
CREATE TABLE USERS(
    ID INT PRIMARY KEY NOT NULL IDENTITY(0,1),
    USERNAME NVARCHAR(25),
    NAME NVARCHAR(25),
    LASTNAME NVARCHAR(50),
	PASSWORD NVARCHAR(50),
    EMAIL NVARCHAR(30),
	STATUS INT FOREIGN KEY REFERENCES STATUS(STATUS),
    GENDER BIT,
    DEF_LANG NVARCHAR(3),
    TIMESTAMP DATETIME DEFAULT GETDATE(),
    REGISTER_CODE INT
);

-- TABLE: PWD_HISTORY
CREATE TABLE PWD_HISTORY(
    HISTORY_ID INT PRIMARY KEY NOT NULL IDENTITY(0,1),
    USER_ID INT,
    OLD_PASSWORD NVARCHAR(50),
    DATE_CHANGED DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
);


-- TABLE: USER_CONNECTIONS
CREATE TABLE USER_CONNECTIONS(
    CONNECTION_ID INT PRIMARY KEY NOT NULL,
    USER_ID INT,
    DATE_CONNECTED DATETIME DEFAULT GETDATE(),
    DATE_DISCONNECTED DATETIME,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
);


-- TABLE: USER_CONNECTIONS_HISTORY
CREATE TABLE USER_CONNECTIONS_HISTORY(
    HISTORY_ID INT PRIMARY KEY NOT NULL IDENTITY(0,1),
    USER_ID INT,
    USERNAME NVARCHAR(30),
    DATE_CONNECTED DATETIME,
    DATE_DISCONNECTED DATETIME,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
);



-- -- Crear la tabla de errores
-- CREATE TABLE USER_ERRORS (
--     ERROR_ID INT PRIMARY KEY IDENTITY(0,1),
--     ERROR_CODE NVARCHAR(50) NOT NULL,
--     ERROR_MESSAGE NVARCHAR(MAX) NOT NULL,
--     ERROR_TIMESTAMP DATETIME DEFAULT GETDATE()
-- );
GO
----- INSERTS -----
INSERT INTO STATUS VALUES(0),(1),(2)


----- SELECTS -----
SELECT * FROM STATUS;
SELECT * FROM USERS;

----- FUNCTIONS -----
go
CREATE FUNCTION fn_user_exists (@USERNAME NVARCHAR(25))
RETURNS BIT
AS
BEGIN
    DECLARE @Exists BIT;
    SET @Exists = (
        SELECT CASE WHEN EXISTS (SELECT 1 FROM USERS WHERE USERNAME = @USERNAME) THEN 1 ELSE 0 END
    );
    RETURN @Exists;
END;
GO
----- PROCEDURES -----


-- sp_wdev_user_insert
go
CREATE PROCEDURE sp_wdev_user_insert
@USERNAME NVARCHAR(25),
@NAME NVARCHAR(25),
@LASTNAME NVARCHAR(50),
@PASSWORD NVARCHAR(50),
@EMAIL NVARCHAR(30)
AS
BEGIN
    INSERT INTO USERS (USERNAME, NAME, LASTNAME, PASSWORD, EMAIL)
    VALUES (@USERNAME, @NAME, @LASTNAME, @PASSWORD, @EMAIL);
END;
go

EXEC sp_wdev_user_insert 
    @USERNAME = 'blowsito',
    @NAME = 'Pau',
    @LASTNAME = 'Allende',
    @PASSWORD = 'contraseña',
    @EMAIL = 'correo@example.com'

go

SELECT * FROM USERS;

go
CREATE PROCEDURE sp_user_register
@USERNAME NVARCHAR(25),
@NAME NVARCHAR(25),
@LASTNAME NVARCHAR(50),
@PASSWORD NVARCHAR(50),
@EMAIL NVARCHAR(30)
AS
BEGIN
    IF dbo.fn_user_exists(@USERNAME) = 1
    BEGIN
        RAISERROR('El nombre de usuario ya está en uso.', 16, 1);
        RETURN;
    END
    
    EXEC sp_wdev_user_insert @USERNAME, @NAME, @LASTNAME, @PASSWORD, @EMAIL;
    
    IF @@ROWCOUNT > 0
    BEGIN
        PRINT 'Usuario registrado exitosamente.';
    END
    ELSE
    BEGIN
        RAISERROR('Error al registrar el usuario.', 16, 1);
        RETURN;
    END
END;
GO
EXEC sp_user_register 
    @USERNAME = 'blowsito',
    @NAME = 'Pau',
    @LASTNAME = 'Allende',
    @PASSWORD = 'contraseña',
    @EMAIL = 'correo2@example.com'

SELECT * FROM USERS;
EXEC @ret=sp_user_register